# PostgreSQL Secrets
apiVersion: v1
kind: Secret
metadata:
  name: database-app
  namespace: {{ .Values.namespaces.postgres }}
type: kubernetes.io/basic-auth
stringData:
  dbname: app
  host: database-rw
  username: {{ .Values.global.database.appUsername }}
  user: {{ .Values.global.database.appUsername }}
  port: "5432"
  password: {{ .Values.global.database.appPassword }}
---
apiVersion: v1
kind: Secret
metadata:
  name: database-superuser
  namespace: {{ .Values.namespaces.postgres }}
type: kubernetes.io/basic-auth
stringData:
  dbname: "*"
  host: database-rw
  username: postgres
  user: postgres
  port: "5432"
  password: {{ .Values.global.database.superuserPassword }}
---

# Keycloak Secrets
apiVersion: v1
kind: Secret
metadata:
  name: pg-secret
  namespace: {{ .Values.namespaces.keycloak }}
type: Opaque
stringData:
  KC_DB_USERNAME: {{ .Values.global.database.appUsername }}
  KC_DB_PASSWORD: {{ .Values.global.database.appPassword }}
---
apiVersion: v1
kind: Secret
metadata:
  name: admin-secret
  namespace: {{ .Values.namespaces.keycloak }}
type: Opaque
stringData:
  KEYCLOAK_ADMIN: admin
  KEYCLOAK_ADMIN_PASSWORD: {{ .Values.global.adminPassword }}
---
# Create secret for keycloak-operator to connect to Keycloak master realm.
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-access
  namespace: {{ .Values.namespaces.keycloak }}
type: Opaque
stringData:
  username: admin
  password: {{ .Values.global.adminPassword }}
---

# Backstage Secret
apiVersion: v1
kind: Secret
metadata:
  name: pg-secret
  namespace: {{ .Values.namespaces.backstage }}
type: Opaque
stringData:
  password: {{ .Values.global.database.appPassword }}
---

# Grafana Admin Secret
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin
  namespace: {{ .Values.namespaces.monitoring }}
type: Opaque
stringData:
  admin-user: admin
  admin-password: {{ .Values.global.adminPassword }}
  ldap-toml: ""
---

# Gitea Secret
apiVersion: v1
kind: Secret
metadata:
  name: gitea-admin-secret
  namespace: {{ .Values.namespaces.gitea }}
type: kubernetes.io/basic-auth
stringData:
  username: gitea_admin
  password: adminadmin
  email: admin@gitea.admin
  passwordMode: keepUpdated
---

{{- if .Values.git.repositoryToken }}
# ArgoCD Repository Secret
apiVersion: v1
kind: Secret
metadata:
  name: argocd-repo-platform
  namespace: {{ .Values.namespaces.argoCD }}
  labels:
    argocd.argoproj.io/secret-type: repository
type: Opaque
stringData:
  name: kuberise
  username: x
  password: {{ .Values.git.repositoryToken }}
  url: {{ .Values.git.repoURL }}
  type: git
{{- end }}

# OAuth2 Client Secrets
apiVersion: v1
kind: Secret
metadata:
  name: kubernetes-oauth2-client-secret
  namespace: {{ .Values.namespaces.keycloak }}
type: Opaque
stringData:
  client-secret: {{ .Values.oauth2.clientSecrets.kubernetes }}
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-oauth2-client-secret
  namespace: {{ .Values.namespaces.monitoring }}
type: Opaque
stringData:
  client-secret: {{ .Values.oauth2.clientSecrets.grafana }}
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-oauth2-client-secret
  namespace: {{ .Values.namespaces.keycloak }}
type: Opaque
stringData:
  client-secret: {{ .Values.oauth2.clientSecrets.grafana }}
---
apiVersion: v1
kind: Secret
metadata:
  name: pgadmin-oauth2-client-secret
  namespace: {{ .Values.namespaces.pgAdmin }}
type: Opaque
stringData:
  client-secret: {{ .Values.oauth2.clientSecrets.pgadmin }}
---
apiVersion: v1
kind: Secret
metadata:
  name: pgadmin-oauth2-client-secret
  namespace: {{ .Values.namespaces.keycloak }}
type: Opaque
stringData:
  client-secret: {{ .Values.oauth2.clientSecrets.pgadmin }}
---
apiVersion: v1
kind: Secret
metadata:
  name: oauth2-proxy-oauth2-client-secret
  namespace: {{ .Values.namespaces.keycloak }}
type: Opaque
stringData:
  client-secret: {{ .Values.oauth2.clientSecrets.oauth2Proxy }}
  client-id: oauth2-proxy
  cookie-secret: {{ .Values.oauth2.clientSecrets.oauth2Proxy }}
---
apiVersion: v1
kind: Secret
metadata:
  name: argocd-oauth2-client-secret
  namespace: {{ .Values.namespaces.keycloak }}
type: Opaque
stringData:
  client-secret: {{ .Values.oauth2.clientSecrets.argocd }}
---

{{- if .Values.openai.enabled }}
# K8sGPT Secret
apiVersion: v1
kind: Secret
metadata:
  name: openai-api
  namespace: {{ .Values.namespaces.k8sGPT }}
type: Opaque
stringData:
  openai-api-key: {{ .Values.openai.apiKey }}
{{- end }}

{{- if .Values.cloudflare.enabled }}
# Cloudflare API Token Secret for ExternalDNS if CLOUDFLARE_API_TOKEN is provided
apiVersion: v1
kind: Secret
metadata:
  name: cloudflare
  namespace: {{ .Values.namespaces.externalDns }}
type: Opaque
stringData:
  cloudflare_api_token: {{ .Values.cloudflare.apiToken }}
---
# Cloudflare API Token Secret for Cert-Manager DNS01 Challenge if CLOUDFLARE_API_TOKEN is provided
apiVersion: v1
kind: Secret
metadata:
  name: cloudflare
  namespace: {{ .Values.namespaces.certManager }}
type: Opaque
stringData:
  cloudflare_api_token: {{ .Values.cloudflare.apiToken }}
{{- end }}
