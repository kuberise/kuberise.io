global:
  platformName: aks
  domain: aks.kuberise.dev

argo-cd:
  global:
    domain: argocd.aks.kuberise.dev
  configs:
    cm:
      timeout.reconciliation: 5s
      url: https://argocd.aks.kuberise.dev
      oidc.config: |
        name: Keycloak
        issuer: https://keycloak.aks.kuberise.dev/realms/platform
        clientID: argocd
        clientSecret: $oidc.keycloak.clientSecret
        requestedScopes: ["openid", "profile", "email", "groups"]
        requestedIDTokenClaims:
          groups:
            essential: true
        groupsAttributePath: groups

  server:
    ingress:
      hostname: argocd.aks.kuberise.dev
      annotations:
        cert-manager.io/cluster-issuer: lets-encrypt
  # in all ingresses we don't define the secret name that contians the certificate. then ingress controller will take the secret from the default secret.
  # but in argocd, the secret name for certificate is hard coded and if we don't create the secret, ingress controller first give an error then fall back to the default one.
  # to avoid that, we add this annotation so the cert-manager create tls secret for argocd exceptionally.
