# SA for backend secrets
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend-vault-sa
  namespace: backend
---
# Vault auth for backend secrets
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultAuth
metadata:
  name: backend-vault-auth
  namespace: vault
spec:
  allowedNamespaces:
  - backend
  kubernetes:
    role: backend-vault-reader
    serviceAccount: backend-vault-sa
    tokenExpirationSeconds: 600
  method: kubernetes
  mount: kubernetes
  namespace: backend
  vaultConnectionRef: vault/default
---
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultStaticSecret
metadata:
  name: backend-creds
  namespace: backend
spec:
  type: kv-v2                                # Specify KV store version
  mount: secret                              # KV secrets engine mount path
  path: applications/backend/backend-creds # Path where the secret is stored
  vaultAuthRef: vault/backend-vault-auth    # Reference to the VaultAuth CR
  refreshAfter: 2h
  destination:
    name: backend-creds                     # Name of the K8s Secret to create
    create: true                             # Create the Secret if it doesn't exist
    type: Opaque                             # Secret type (Opaque is default)
---
apiVersion: batch/v1
kind: Job
metadata:
  name: backend-vault-policy-role-setup
  namespace: vault
  annotations:
    argocd.argoproj.io/hook: PostSync
    # Remove the HookFailed deletion policy to keep failed jobs
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
  labels:
    app.kubernetes.io/part-of: vault-setup
spec:
  backoffLimit: 0
  ttlSecondsAfterFinished: 300  # Increased to 5 minutes for more time to check logs
  template:
    metadata:
      labels:
        app.kubernetes.io/part-of: vault-setup
    spec:
      serviceAccountName: vault
      restartPolicy: Never
      containers:
      - name: vault-cli
        image: hashicorp/vault:latest
        env:
        - name: VAULT_ADDR
          value: "http://vault.vault:8200"
        # Optionally, set VAULT_TOKEN if not automatically authenticated in dev mode:
        - name: VAULT_TOKEN # FIXME: use service account instead of token for production
          value: root
        command: ["/bin/sh", "-c"]
        args:
        - |
          set -e

          echo "Checking if secret 'secret/applications/backend/backend-creds' exists..."
          if vault kv get secret/applications/backend/backend-creds > /dev/null 2>&1; then
            echo "Secret already exists. Skipping random password generation."
          else
            echo "Generating a random password..."
            # Use the -field flag to extract the random_bytes value directly
            RANDOM_PASSWORD=$(head -c 16 /dev/urandom | base64)
            echo "Storing the random password in Vault at secret/applications/backend/backend-creds..."
            vault kv put secret/applications/backend/backend-creds password="$RANDOM_PASSWORD" username="admin"
            echo "Secret stored in Vault at secret/applications/backend/backend-creds."
          fi

          echo "Creating Vault policy 'backend-read'..."
          vault policy write backend-read - <<EOF
          path "secret/data/applications/backend/*" {
            capabilities = ["read", "list"]
          }
          EOF
          echo "Vault policy 'backend-read' created successfully."

          echo "Enabling Kubernetes auth method in Vault (if not already enabled)..."
          vault auth enable kubernetes || echo "Kubernetes auth already enabled."

          # echo "Configuring Kubernetes auth connection to the cluster..."
          # vault write auth/kubernetes/config \
          #   token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
          #   kubernetes_host="https://kubernetes.default.svc" \
          #   kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt

          echo "Creating Vault Kubernetes auth role 'backend-vault-reader'..."
          vault write auth/kubernetes/role/backend-vault-reader \
            bound_service_account_names="backend-vault-sa" \
            bound_service_account_namespaces="backend" \
            policies="backend-read" \
            ttl="1h"

          echo "Vault role 'backend-vault-reader' created and bound to Service Account 'vault-auth-sa' in namespace 'default'."
